<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freestashnode.github.io/news/article-76333.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <title>golang bufio解析</title>
        <meta name="description" content="golang bufio  目录  golang bufio  使用bufio进行写  缓存中满数据 缓存中仍有空间 待写入的数据大于缓存的大小 缓存重用 获取缓存的可用空间数   使用bufio进行" />
        <link rel="icon" href="/assets/website/img/freestashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Stash Node免费机场节点分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freestashnode.github.io/news/article-76333.htm" />
    <meta property="og:site_name" content="Free Stash Node免费机场节点分享官网" />
    <meta property="og:title" content="golang bufio解析" />
    <meta property="og:image" content="https://freestashnode.github.io/uploads/20240919/710fa7f9c8c82ca1274d9fe2c4fcc037.webp" />
        <meta property="og:release_date" content="2025-03-18T06:13:00" />
    <meta property="og:updated_time" content="2025-03-18T06:13:00" />
        <meta property="og:description" content="golang bufio  目录  golang bufio  使用bufio进行写  缓存中满数据 缓存中仍有空间 待写入的数据大于缓存的大小 缓存重用 获取缓存的可用空间数   使用bufio进行" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="golang bufio解析">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,500;0,700;0,900;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
    <!-- Stylesheets -->
    <link href="/assets/website/css/freestashnode/font-awesome-all.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/flaticon.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/owl.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/bootstrap.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/jquery.fancybox.min.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/animate.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/color.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/style.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/responsive.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-YXFDLQYLFV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-YXFDLQYLFV');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>
<!-- page wrapper -->

<body data-page="detail">
    <div class="boxed_wrapper">
                <!-- preloader -->
        <div class="preloader"></div>
        <!-- preloader -->
        <!-- main header -->
        <header class="main-header style-one">
            <!-- header-lower -->
            <div class="header-lower">
                <div class="outer-box">
                    <div class="logo-box">
                        <figure class="logo">
                            <a href="/">
                                                        <span>Free Stash Node</span>
                                                        </a>
                        </figure>
                    </div>
                    <div class="menu-area">
                        <!--Mobile Navigation Toggler-->
                        <div class="mobile-nav-toggler">
                            <i class="icon-bar"></i>
                            <i class="icon-bar"></i>
                            <i class="icon-bar"></i>
                        </div>
                        <nav class="main-menu navbar-expand-md navbar-light">
                            <div class="collapse navbar-collapse show clearfix" id="navbarSupportedContent">
                                <ul class="navigation clearfix">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                    </ul>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
            <!--sticky Header-->
            <div class="sticky-header">
                <div class="outer-box">
                    <div class="logo-box">
                        <figure class="logo">
                            <a href="/">
                                <span>Free Stash Node</span>
                            </a>
                        </figure>
                    </div>
                    <div class="menu-area">
                        <nav class="main-menu clearfix">
                            <!--Keep This Empty / Menu will come through Javascript-->
                        </nav>
                    </div>
                </div>
            </div>
        </header>
        <!-- main-header end -->
        <!-- Mobile Menu  -->
        <div class="mobile-menu">
            <div class="menu-backdrop"></div>
            <div class="close-btn"><i class="fas fa-times"></i></div>
            <nav class="menu-box">
                <div class="menu-outer">
                    <!--Here Menu Will Come Automatically Via Javascript / Same Menu as in Header-->
                </div>
                <div class="social-links">
                    <ul class="clearfix">
                        <li><a href="#"><span class="fab fa-twitter"></span></a></li>
                        <li><a href="#"><span class="fab fa-facebook-square"></span></a></li>
                        <li><a href="#"><span class="fab fa-pinterest-p"></span></a></li>
                        <li><a href="#"><span class="fab fa-instagram"></span></a></li>
                        <li><a href="#"><span class="fab fa-youtube"></span></a></li>
                    </ul>
                </div>
            </nav>
        </div><!-- End Mobile Menu -->
        <!-- Page Title -->
        <section class="page-title centred" style="background-image: url(/assets/website/img/freestashnode/background/page-title.jpg);">
            <div class="auto-container">
                <div class="content-box">
                    <div class="title">
                        <h1>golang bufio解析</h1>
                    </div>
                    <ul class="bread-crumb clearfix">
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ul>
                </div>
            </div>
        </section>
        <!-- End Page Title -->
        <!-- about-section -->
        <section class="about-section">
            <div class="auto-container">
                <div class="row clearfix">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="StashNode免费订阅官网" data-url="https://stashnode.github.io">
                  				  				  				<h2 id="golang-bufio">golang bufio</h2> <div class="toc"> <div class="toc-container-header">目录</div> <ul> <li><a href="#golang-bufio" rel="nofollow">golang bufio</a> <ul> <li><a href="#%E4%BD%BF%E7%94%A8bufio%E8%BF%9B%E8%A1%8C%E5%86%99" rel="nofollow">使用bufio进行写</a> <ul> <li><a href="#%E7%BC%93%E5%AD%98%E4%B8%AD%E6%BB%A1%E6%95%B0%E6%8D%AE" rel="nofollow">缓存中满数据</a></li> <li><a href="#%E7%BC%93%E5%AD%98%E4%B8%AD%E4%BB%8D%E6%9C%89%E7%A9%BA%E9%97%B4" rel="nofollow">缓存中仍有空间</a></li> <li><a href="#%E5%BE%85%E5%86%99%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A4%A7%E4%BA%8E%E7%BC%93%E5%AD%98%E7%9A%84%E5%A4%A7%E5%B0%8F" rel="nofollow">待写入的数据大于缓存的大小</a></li> <li><a href="#%E7%BC%93%E5%AD%98%E9%87%8D%E7%94%A8" rel="nofollow">缓存重用</a></li> <li><a href="#%E8%8E%B7%E5%8F%96%E7%BC%93%E5%AD%98%E7%9A%84%E5%8F%AF%E7%94%A8%E7%A9%BA%E9%97%B4%E6%95%B0" rel="nofollow">获取缓存的可用空间数</a></li> </ul> </li> <li><a href="#%E4%BD%BF%E7%94%A8bufio%E8%BF%9B%E8%A1%8C%E8%AF%BB" rel="nofollow">使用bufio进行读</a> <ul> <li><a href="#peek" rel="nofollow">Peek</a></li> <li><a href="#read" rel="nofollow">Read</a></li> <li><a href="#readslice" rel="nofollow">ReadSlice</a></li> <li><a href="#readline" rel="nofollow">ReadLine</a></li> <li><a href="#readbytes" rel="nofollow">ReadBytes</a></li> <li><a href="#scanner" rel="nofollow">Scanner</a></li> </ul> </li> <li><a href="#%E9%99%84" rel="nofollow">附</a> <ul> <li><a href="#%E5%B9%B6%E5%8F%91%E5%A4%8D%E7%94%A8%E7%BC%93%E5%AD%98" rel="nofollow">并发复用缓存</a></li> <li><a href="#%E9%99%90%E5%88%B6%E4%BB%8Eioreader%E4%B8%AD%E8%AF%BB%E5%8F%96%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%8F" rel="nofollow">限制从<code>io.Reader</code>中读取的数据量</a> <ul> <li><a href="#%E6%96%B9%E5%BC%8F1" rel="nofollow">方式1</a></li> <li><a href="#%E6%96%B9%E5%BC%8F2" rel="nofollow">方式2</a></li> </ul> </li> </ul> </li> <li><a href="#%E5%8F%82%E8%80%83" rel="nofollow">参考</a></li> </ul> </li> </ul> </div> <p>当频繁地对少量数据读写时会占用IO，造成性能问题。golang的<code>bufio</code>库使用缓存来一次性进行大块数据的读写，以此降低IO系统调用，提升性能。</p> <p>在Transport中可以设置一个名为<code>WriteBufferSize</code>的参数，该参数指定了底层(<code>Transport.dialConn</code>)写buffer的大小。</p> <pre><code class="language-go">	tr := &amp;http.Transport{ 		WriteBufferSize:     64 * 1024, 	}</code></pre> <pre><code class="language-go">	pconn.br = bufio.NewReaderSize(pconn, t.readBufferSize()) 	pconn.bw = bufio.NewWriterSize(persistConnWriter{pconn}, t.writeBufferSize())</code></pre> <h3 id="使用bufio进行写">使用bufio进行写</h3> <p>可以使用<code>bufio.NewWriter</code>初始化一个大小为4096字节的<code>Writer</code>(见下)，或使用<code>bufio.NewWriterSize</code>初始化一个指定大小的<code>Writer</code>。</p> <p><code>Writer</code>中的主要参数为缓存区<code>buf</code>，缓存区中的数据偏移量<code>n</code>以及写入接口<code>wr</code>：</p> <pre><code class="language-go">type Writer struct { 	err error 	buf []byte 	n   int 	wr  io.Writer }</code></pre> <p><code>bufio.Writer</code>方法可以一次性写入缓存中的数据，通常有如下三种情况：</p> <ol> <li>缓存中满数据</li> <li>缓存中仍有空间</li> <li>待写入的数据大于缓存的大小</li> </ol> <h4 id="缓存中满数据">缓存中满数据</h4> <p>当缓存中满数据时，会执行写操作。</p> <h4 id="缓存中仍有空间">缓存中仍有空间</h4> <p>如果缓存中仍有数据，则不会执行写入动作，除非调用<code>Flush()</code>方法。</p> <h4 id="待写入的数据大于缓存的大小">待写入的数据大于缓存的大小</h4> <p>由于此时缓存无法缓存足够的数据，此时会跳过缓存直接执行写操作</p> <pre><code class="language-go">type Writer int  func (*Writer) Write(p []byte) (n int, err error) { 	fmt.Printf("Writing: %s\n", p) 	return len(p), nil }  func main() { 	w := new(Writer) 	bw1 := bufio.NewWriterSize(w, 4)  	// Case 1: Writing to buffer until full 	bw1.Write([]byte{'1'}) 	bw1.Write([]byte{'2'}) 	bw1.Write([]byte{'3'}) 	bw1.Write([]byte{'4'}) // write - buffer is full  	// Case 2: Buffer has space     bw1.Write([]byte{'5'}) //此时buffer中无法容纳更多的数据，执行写操作，写入 []byte{'1','2','3','4'} 	err = bw1.Flush() // forcefully write remaining 	if err != nil { 		panic(err) 	}  	// Case 3: (too) large write for buffer 	// Will skip buffer and write directly 	bw1.Write([]byte("12345")) //buffer不足，直接执行写操作 }  //结果： Writing: 1234 Writing: 5 Writing: 12345</code></pre> <h4 id="缓存重用">缓存重用</h4> <p>申请缓存对性能是有损耗的，可以使用<code>Reset</code>方法重置缓存，其内部只是将<code>Writer</code>的数据偏移量<code>n</code>置0。</p> <pre><code class="language-go">wr := new(Writer) bw := bufio.NewWriterSize(wr,2)  bw.Reset(wr)</code></pre> <h4 id="获取缓存的可用空间数">获取缓存的可用空间数</h4> <p><code>Available()</code>方法可以返回缓存的可用空间数，即<code>len(Writer.buf)-Writer.n</code></p> <h3 id="使用bufio进行读">使用bufio进行读</h3> <p>与用于写数据的<code>Writer</code>类似，读数据也有一个<code>Reader</code>，可以使用<code>NewReader</code>初始化一个大小为4096字节的<code>Reader</code>，或使用<code>NewReaderSize</code>初始化一个指定大小的<code>Reader</code>(要求最小字节为16)。<code>Reader</code>也有一个记录偏移量的变量<code>r</code></p> <pre><code class="language-go">type Reader struct { 	buf          []byte 	rd           io.Reader // reader provided by the client 	r, w         int       // buf read and write positions 	err          error 	lastByte     int // last byte read for UnreadByte; -1 means invalid 	lastRuneSize int // size of last rune read for UnreadRune; -1 means invalid }</code></pre> <h4 id="peek">Peek</h4> <p>该方法会返回buf中的前n个字节的内容，但与Read操作不同的是，它不会消费缓存中的数据，即不会增加数据偏移量，因此通常也会用于判断是否读取结束(EOF)。通常有如下几种情况：</p> <ol> <li>如果peak的值小于缓存大小，则返回相应的内容</li> <li>如果peak的值大于缓存大小，则返回<em>bufio.ErrBufferFull</em>错误</li> <li>如果peak的值包含EOF且小于缓存大小，则返回EOF</li> </ol> <h4 id="read">Read</h4> <p>将数据读取到<code>p</code>，涉及将数据从缓存拷贝到<code>p</code>。</p> <pre><code class="language-go">func (b *Reader) Read(p []byte) (n int, err error)</code></pre> <h4 id="readslice">ReadSlice</h4> <p>该方法会读从缓存读取数据，直到遇到第一个<code>delim</code>。如果缓存中没有<code>delim</code>，则返回EOF，如果查询的长度超过了缓存大小，则返回<code>io.ErrBufferFull</code> 错误。</p> <pre><code class="language-go">func (b *Reader) ReadSlice(delim byte) (line []byte, err error)</code></pre> <p>例如<code>delim</code>为<code>','</code>，则下面会返回的内容为<code>1234,</code>。</p> <pre><code class="language-go">func main() {     r := strings.NewReader("1234,567")     rb := bufio.NewReaderSize(r, 20)     fmt.Println(rb.ReadSlice(',')) }  // 结果：[49 50 51 52 44] &lt;nil&gt;</code></pre> <blockquote> <p>注意：<code>ReadSlice</code>返回的是原始缓存中的内容，如果针对缓存作并发操作，则返回的内容有可能被其他操作覆盖。因此在官方注释里面有写，建议使用<code>ReadBytes</code>或<code>ReadString</code>。但<code>ReadBytes</code>和<code>ReadString</code>涉及内存申请和拷贝，因此会影响性能。在追求高性能的场景下，建议外部使用<code>sync.pool</code>来提供缓存。</p> <pre><code>// Because the data returned from ReadSlice will be overwritten // by the next I/O operation, most clients should use // ReadBytes or ReadString instead.</code></pre> </blockquote> <h4 id="readline">ReadLine</h4> <pre><code class="language-go">ReadLine() (line []byte, isPrefix bool, err error)</code></pre> <p><code>ReadLine</code>底层用到了<code>ReadSlice</code>，但在返回时会移除<code>\n</code> 或<code>\r\n</code>。需要注意的是，如果切片中没有找到换行符，则不会返回EOF或<code>io.ErrBufferFull</code> 错误，相反，它会将<code>isPrefix</code>置为<code>true</code></p> <h4 id="readbytes">ReadBytes</h4> <p>与<code>ReadSlice</code>类似，但它会返回一个新的切片，因此便于并发使用。如果找不到<code>delim</code>，<code>ReadBytes</code>会返回<code>io.EOF</code></p> <pre><code class="language-go">func (b *Reader) ReadBytes(delim byte) ([]byte, error)</code></pre> <h4 id="scanner">Scanner</h4> <p>scanner可以不断将数据读取到缓存(默认64*1024字节)。</p> <pre><code class="language-go">func main() {     rb := strings.NewReader("12345678901234567890") 	scanner := bufio.NewScanner(rb) 	for scanner.Scan() { 		fmt.Printf("Token (Scanner): %q\n", scanner.Text()) 	} }  // 结果：Token (Scanner): "12345678901234567890"</code></pre> <h3 id="附">附</h3> <h4 id="并发复用缓存">并发复用缓存</h4> <p><code>io.bufio</code>支持缓存读写以及<code>Reset</code>操作，但在并发复用缓存方面做的不是很好，可以参考：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/charlieroro/p/16110151.html"  target="_blank" rel="nofollow">victoriaMetrics之byteBuffer</a>。</p> <blockquote> <p>无需并发复用的话，用<code>io.bufio</code>即可。</p> </blockquote> <h4 id="限制从ioreader中读取的数据量">限制从<code>io.Reader</code>中读取的数据量</h4> <h5 id="方式1">方式1</h5> <p>使用<code>io.LimitReader</code>来限制从<code>Reader</code>中读取的数据量，<code>LimitedReader.N</code>给出了可读取的剩余数据量。一旦N变为0，即时<code>Reader</code>中仍然有数据，此时也会返回EOF</p> <pre><code class="language-go">type LimitedReader struct {    R Reader // underlying reader    N int64  // max bytes remaining }</code></pre> <pre><code class="language-go">func main() {     rb := strings.NewReader("12345678901234567890")  	lr := io.LimitReader(rb, 3)//限制可以读取3个字节的数据 	buf := make([]byte, 400) 	fmt.Println(lr.Read(buf)) //达到读取上限制，LimitedReader.N=0 	fmt.Println(lr.Read(buf)) //此时返回EOF }  //结果 3 &lt;nil&gt; 0 EOF</code></pre> <h5 id="方式2">方式2</h5> <p>可以使用<code>io.CopyN</code>限制从<code>Reader</code>读取的数据量，它内部也使用了<code>io.LimitReader</code>，但支持多次读取。</p> <pre><code class="language-go">type Writer int  func (*Writer) Write(p []byte) (n int, err error) { 	fmt.Printf("Writing: %s\n", p) 	return len(p), nil }  func main() {     rb := strings.NewReader("12345678901234567890")      w := new(Writer)     fmt.Println(io.CopyN(w, rb, 6))     fmt.Println(io.CopyN(w, rb, 6)) }  //结果 Writing: 123456 6 &lt;nil&gt; Writing: 789012 6 &lt;nil&gt;</code></pre> <h3 id="参考">参考</h3> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.educative.io/edpresso/how-to-read-and-write-with-golang-bufio"  target="_blank" rel="nofollow">how-to-read-and-write-with-golang-bufio</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-75646.htm">宠物粮食生产厂家排名榜 宠物粮食生产厂家排名榜前十名</a></p>
                                        <p>下一个：<a href="/news/article-76334.htm">厦门宠物狗领养中心电话地址（厦门宠物狗领养中心电话地址是多少）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-1-21-node-share.htm" title="1月21日→19.8M/S|2025年最新免费节点Free Stash Node订阅链接地址">1月21日→19.8M/S|2025年最新免费节点Free Stash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-23-free-clash-stash.htm" title="1月23日→19.3M/S|2025年最新免费节点Free Stash Node订阅链接地址">1月23日→19.3M/S|2025年最新免费节点Free Stash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-4-clash-stash-node.htm" title="3月4日→19.9M/S|2025年最新免费节点Free Stash Node订阅链接地址">3月4日→19.9M/S|2025年最新免费节点Free Stash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-42533.htm" title="动物医院工作时间（动物医院工作时间安排）">动物医院工作时间（动物医院工作时间安排）</a></li>
                        <li class="py-2"><a href="/news/article-70975.htm" title="动物疫苗研究员工资高吗（研究动物疫苗要学什么专业）">动物疫苗研究员工资高吗（研究动物疫苗要学什么专业）</a></li>
                        <li class="py-2"><a href="/news/article-44510.htm" title="安泰动物诊所怎么样 安泰动物诊所怎么样啊">安泰动物诊所怎么样 安泰动物诊所怎么样啊</a></li>
                        <li class="py-2"><a href="/news/article-40042.htm" title="宠物店猫疫苗多少钱一针（宠物店猫疫苗多少钱一针打）">宠物店猫疫苗多少钱一针（宠物店猫疫苗多少钱一针打）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-16-linux-clash-stash.htm" title="2月16日→23M/S|2025年最新免费节点Free Stash Node订阅链接地址">2月16日→23M/S|2025年最新免费节点Free Stash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-36242.htm" title="手写事件发布订阅框架">手写事件发布订阅框架</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-10-free-stash-node.htm" title="1月10日→21.4M/S|2025年最新免费节点Free Stash Node订阅链接地址">1月10日→21.4M/S|2025年最新免费节点Free Stash Node订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
        <!-- about-section end -->
                <!-- main-footer -->
        <footer class="main-footer">
            <div class="footer-bottom">
                <div class="auto-container">
                    <div class="inner-box clearfix">
                        <div class="copyright pull-left">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <p>
                                <a href="/">Free Stash Node免费机场节点分享官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!-- main-footer end -->
        <!--Scroll to top-->
        <button class="scroll-top scroll-to-target" data-target="html">
            <span class="fa fa-arrow-up"></span>
        </button>
        <!-- jequery plugins -->
        <script src="/assets/website/js/frontend/freestashnode/jquery.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/popper.min.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/bootstrap.min.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/owl.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/wow.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/validation.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/jquery.fancybox.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/appear.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/scrollbar.js"></script>
        <!-- main-js -->
        <script src="/assets/website/js/frontend/freestashnode/script.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    </div>
</body><!-- End of .page_wrapper -->

</html>