<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freestashnode.github.io/news/article-108104.htm" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <title>RenderDoc图形调试器详细使用教程(基于DirectX11)</title>
        <meta name="description" content="由于最近Visual Studio的图形调试器老是抽风，不得不寻找一个替代品了。 对于图形程序开发者来说，学会使用RenderDoc图形调试器可以帮助你全面了解渲染管线绑定的资源和运行状态，从而确认问" />
        <link rel="icon" href="/assets/website/img/freestashnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Stash Node免费机场节点分享官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freestashnode.github.io/news/article-108104.htm" />
    <meta property="og:site_name" content="Free Stash Node免费机场节点分享官网" />
    <meta property="og:title" content="RenderDoc图形调试器详细使用教程(基于DirectX11)" />
    <meta property="og:image" content="https://freestashnode.github.io/uploads/20240919/5a5be2441391b85e39c5de3b954704c7.webp" />
        <meta property="og:release_date" content="2025-04-30T09:34:14" />
    <meta property="og:updated_time" content="2025-04-30T09:34:14" />
        <meta property="og:description" content="由于最近Visual Studio的图形调试器老是抽风，不得不寻找一个替代品了。 对于图形程序开发者来说，学会使用RenderDoc图形调试器可以帮助你全面了解渲染管线绑定的资源和运行状态，从而确认问" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="RenderDoc图形调试器详细使用教程(基于DirectX11)">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,300;0,400;0,500;0,700;0,900;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
    <!-- Stylesheets -->
    <link href="/assets/website/css/freestashnode/font-awesome-all.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/flaticon.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/owl.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/bootstrap.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/jquery.fancybox.min.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/animate.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/color.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/style.css" rel="stylesheet">
    <link href="/assets/website/css/freestashnode/responsive.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-YXFDLQYLFV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-YXFDLQYLFV');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>
<!-- page wrapper -->

<body data-page="detail">
    <div class="boxed_wrapper">
                <!-- preloader -->
        <div class="preloader"></div>
        <!-- preloader -->
        <!-- main header -->
        <header class="main-header style-one">
            <!-- header-lower -->
            <div class="header-lower">
                <div class="outer-box">
                    <div class="logo-box">
                        <figure class="logo">
                            <a href="/">
                                                        <span>Free Stash Node</span>
                                                        </a>
                        </figure>
                    </div>
                    <div class="menu-area">
                        <!--Mobile Navigation Toggler-->
                        <div class="mobile-nav-toggler">
                            <i class="icon-bar"></i>
                            <i class="icon-bar"></i>
                            <i class="icon-bar"></i>
                        </div>
                        <nav class="main-menu navbar-expand-md navbar-light">
                            <div class="collapse navbar-collapse show clearfix" id="navbarSupportedContent">
                                <ul class="navigation clearfix">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                    </ul>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
            <!--sticky Header-->
            <div class="sticky-header">
                <div class="outer-box">
                    <div class="logo-box">
                        <figure class="logo">
                            <a href="/">
                                <span>Free Stash Node</span>
                            </a>
                        </figure>
                    </div>
                    <div class="menu-area">
                        <nav class="main-menu clearfix">
                            <!--Keep This Empty / Menu will come through Javascript-->
                        </nav>
                    </div>
                </div>
            </div>
        </header>
        <!-- main-header end -->
        <!-- Mobile Menu  -->
        <div class="mobile-menu">
            <div class="menu-backdrop"></div>
            <div class="close-btn"><i class="fas fa-times"></i></div>
            <nav class="menu-box">
                <div class="menu-outer">
                    <!--Here Menu Will Come Automatically Via Javascript / Same Menu as in Header-->
                </div>
                <div class="social-links">
                    <ul class="clearfix">
                        <li><a href="#"><span class="fab fa-twitter"></span></a></li>
                        <li><a href="#"><span class="fab fa-facebook-square"></span></a></li>
                        <li><a href="#"><span class="fab fa-pinterest-p"></span></a></li>
                        <li><a href="#"><span class="fab fa-instagram"></span></a></li>
                        <li><a href="#"><span class="fab fa-youtube"></span></a></li>
                    </ul>
                </div>
            </nav>
        </div><!-- End Mobile Menu -->
        <!-- Page Title -->
        <section class="page-title centred" style="background-image: url(/assets/website/img/freestashnode/background/page-title.jpg);">
            <div class="auto-container">
                <div class="content-box">
                    <div class="title">
                        <h1>RenderDoc图形调试器详细使用教程(基于DirectX11)</h1>
                    </div>
                    <ul class="bread-crumb clearfix">
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li>正文</li>
                    </ul>
                </div>
            </div>
        </section>
        <!-- End Page Title -->
        <!-- about-section -->
        <section class="about-section">
            <div class="auto-container">
                <div class="row clearfix">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="StashNode免费订阅官网" data-url="https://stashnode.github.io">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				</h1> <p>由于最近Visual Studio的图形调试器老是抽风，不得不寻找一个替代品了。</p> <p>对于图形程序开发者来说，学会使用RenderDoc图形调试器可以帮助你全面了解渲染管线绑定的资源和运行状态，从而确认问题所在。</p> <p><strong>RenderDoc官网</strong></p> <p><strong>DirectX11 With Windows SDK完整目录</strong></p> </h1> <p>为了调试我们的程序，需要通过RenderDoc来执行程序。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1ebda54a6cbe741961790b8f986ee975.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>选择File - Launch Application后，在Program - Executable Path中选择要打开的程序。</p> <blockquote> <p><strong>注意：在你自己编写的项目需要将exe放到项目(.vcxproj)所在的位置，或者让VS在生成程序的时候输出到项目位置！</strong></p> </blockquote> <p>如果待调试的程序需要加载Assimp的动态库，我们还需要添加环境变量：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/78a10e7bb3a24b4ea49886a0a18509eb.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>然后就可以点击Launch运行程序了。</p> </h1> <p>在进入程序后，按下Print Screen(PrtSc)键截取一帧有问题的画面，然后就可以看到程序窗口说已经捕获了一帧：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d686c77ebfbb988b0803d74447b72934.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>捕获完成后退出程序即可，捕获的一帧文件类型为<code>*.rdc</code></p> <p>你可以在一次调试截取多帧画面，但基本上目前我们只需要截取一帧画面就可以退出程序了。</p> </h1> <p>下面是图形调试器的主界面：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5c939d9d00d1c506ba1f2aa9288fb715.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p><strong>事件浏览器</strong>展示了DirectX中关于<code>ID3D11DeviceContext</code>的重要调用，呈现了这一帧绘制涉及到的<code>Clear</code>、<code>Draw</code>、<code>Dispatch</code>、<code>Present</code>和<code>Resolve</code>等命令。选择具体某个事件，可以在下面的<code>API Inspector</code>看到在这个事件之前大概15个<code>DeviceContext</code>的调用事件。</p> <p>事件浏览器会将绘制到同一系列渲染目标和深度缓冲区的事件折叠成一个Pass，我们可以展开观察里面的具体绘制过程。</p> <p><strong>在选中某次绘制后</strong>，我们可以观察的有：</p> <ul> <li><strong>Texture Viewer</strong>：完成当前绘制后渲染目标的结果、深度缓冲区的结果、像素着色器调试</li> <li><strong>Pipeline State</strong>：观察当前渲染管线有哪些阶段是被激活的，以及不同的阶段状态是怎样的</li> <li><strong>Mesh Viewer</strong>：观察当前正在渲染的模型从顶点输入是什么情况，经过顶点着色输出后又是什么情况，并且能够观察正在渲染的模型</li> <li><strong>Resource Inspector</strong>：观察当前绘制后有哪些资源，状态如何</li> </ul> <p>接下来会按教程的顺序来讲可能需要查看的内容</p> <h2 id="pipeline-state">Pipeline State</h2> <p>在管线状态中我们可以清楚地看到当前有哪些执行的阶段，选择IA（输入装配阶段）可以看到<strong>输入布局</strong>、<strong>顶点缓冲区输入</strong>和<strong>图元类型</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/cb03c204563a2bd8963d3714a0facebd.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>如果找不到窗口可以去菜单栏Window找到Pipeline State。</p> <h2 id="mesh-viewer">Mesh Viewer</h2> <p>点击上图中的Mesh View内的立方体可以跳转到模型线框观察页面，同时可以观察输入的顶点数据：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b4591bf161e4efb1e43d73cc88c61d00.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>通过Controls可以切换摄像机模式为第一人称，然后使用WSAD移动</p> <p>如果屏幕上没有渲染出想要的东西，首先应当检查的是输出的顶点<code>SV_POSITION</code>是否位于NDC空间内，具体为：</p> <div class="math display">\[-1\leq\frac{x}{w}\leq 1\\<br /> -1\leq\frac{y}{w}\leq 1\\<br /> 0\leq\frac{z}{w}\leq 1<br /> \]</div> <p>要调试某个顶点，只需要在VS Input中选择一个顶点右键 - Debug this vertex即可进入着色器调试。但调试环节我们留到后面再讲。</p> <h2 id="texture-viewer">Texture Viewer</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/642f5ecfe822465eb8463eabdac7036f.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>在Texture Viewer中我们可以观察绑定到管线上的图片(Input)，以及渲染管线输出到的渲染目标、深度缓冲区(Output)。在选择某个Output图后，我们右键选中一个像素，右下角的Pixel Context就会显示具体的位置：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/bdda2b22aaa848e12c33ee5b6d926fde.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>选择History可以查看在此之前有哪些绘制事件影响到当前像素，选择Debug则可以调试当前像素。</p> <h3 id="观察深度模板缓冲区">观察深度/模板缓冲区</h3> <p>选中深度/模板缓冲区，一般情况下越远的物体显得越白，越近显得越黑，且深度图的颜色分布大多在白色上。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/bb73e34b555483df1c6e7288f6352ecf.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>而如果使用了反向Z，越远的物体显得越黑，越近显得越白，且分布大多在黑色上，这时候看深度图就是纯黑一片，根本不知道什么情况：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b31038d79231aab97424e936a5a4caed.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>由于此时深度值大部分在靠近0的位置上，我们需要缩小显示范围来提高较远物体的亮度：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/071f5515efa19c2d38cdaf0f7a591933.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>为了观察模板测试的结果，我们先选中Stencil，如果模板的输出值为1，可能需要将Range右边的条拖到最左边才看得到（白色区域模板值为1，黑色区域模板值为0）：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/163307c655f02e94006a893109988daa.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>在Overlay中，我们可以观察当前绘制中影响到的像素区域、深度测试（绿Pass红Fail）、模板测试、背面剔除等结果。下图演示了模型的线框在图中的位置：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/0292889088678671cfe5ce9561ad09ea.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <h2 id="resource-inspector">Resource Inspector</h2> <p>在这里可以观察与当前绘制相关的所有资源：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4172fb7035d62b03d8da8c2d6745dd67.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>选中某个资源后，可以看到和它相关的资源、资源在哪些事件中被用到、资源初始化相关的调用。</p> <h2 id="观察常量缓冲区">观察常量缓冲区</h2> <p>在管道状态的着色器阶段中，我们可以看到绑定的常量缓冲区：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a520d191bbc8ac1e9a9e839c64d6fb22.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>其中Slot的名称来自着色器声明cbuffer时的名称，Buffer的名称则需要在C++代码中设置，具体参考下一节。</p> <p>选择某一个常量缓冲区，点击Go处的箭头，我们就可以看到里面的具体内容：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5a4430f335aed62bc20282335d3ffe83.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <blockquote> <p><strong>注意：在当前教程中我们会传入经过DirectXMath转置后的矩阵，但是在这里观察值的时候，依然是以行矩阵的方式显示才是正常的！即平移分量位于第四行。</strong></p> </blockquote> <p>若常量缓冲区的值在从C++端传入到这里出现问题，你还需要去观察常量缓冲区的打包是否出现了问题。</p> <p>关于HLSL的打包规则，可以查看这里：<br />深入理解HLSL常量缓冲区打包规则</p> <h2 id="为图形调试器的对象添加自定义名称">为图形调试器的对象添加自定义名称</h2> <p>看前面的图片，Buffer在没有指定名称的时候默认是以<code>Buffer 142</code>的形式显示的。等对象一多，我们就难以判别管线所绑定的对象是否正确。因此在某些需要的情况下，我们可以在C++代码来为对象指定名称。</p> <p>在<code>d3dUtil.h</code>中提供了两个系列的函数，一个用于D3D设备创建出来的对象，一个用于DXGI对象。通过<code>SetPrivateData</code>方法，并使用<code>WKPDID_D3DDebugObjectName</code>的<code>GUID</code>使得我们可以为其设置图形调试器下的名称（string_view版本要求C++17，或者可以参照旧<code>d3dUtil.h</code>中的实现）：</p> <pre><code class="language-cpp">// ------------------------------ // D3D11SetDebugObjectName函数 // ------------------------------ // 为D3D设备创建出来的对象在图形调试器中设置对象名 // [In]resource				D3D11设备创建出的对象 // [In]name					对象名 inline void D3D11SetDebugObjectName(_In_ ID3D11DeviceChild* resource, _In_ std::string_view name) { #if (defined(DEBUG) || defined(_DEBUG)) &amp;&amp; (GRAPHICS_DEBUGGER_OBJECT_NAME) 	resource-&gt;SetPrivateData(WKPDID_D3DDebugObjectName, (UINT)name.length(), name.data()); #else 	UNREFERENCED_PARAMETER(resource); 	UNREFERENCED_PARAMETER(name); #endif }  // ------------------------------ // D3D11SetDebugObjectName函数 // ------------------------------ // 为D3D设备创建出来的对象在图形调试器中清空对象名 // [In]resource				D3D11设备创建出的对象 inline void D3D11SetDebugObjectName(_In_ ID3D11DeviceChild* resource, _In_ std::nullptr_t) { #if (defined(DEBUG) || defined(_DEBUG)) &amp;&amp; (GRAPHICS_DEBUGGER_OBJECT_NAME) 	resource-&gt;SetPrivateData(WKPDID_D3DDebugObjectName, 0, nullptr); #else 	UNREFERENCED_PARAMETER(resource); #endif }  // ------------------------------ // DXGISetDebugObjectName函数 // ------------------------------ // 为DXGI对象在图形调试器中设置对象名 // [In]object				DXGI对象 // [In]name					对象名 inline void DXGISetDebugObjectName(_In_ IDXGIObject* object, _In_ std::string_view name) { #if (defined(DEBUG) || defined(_DEBUG)) &amp;&amp; (GRAPHICS_DEBUGGER_OBJECT_NAME) 	object-&gt;SetPrivateData(WKPDID_D3DDebugObjectName, (UINT)name.length(), name.c_str()); #else 	UNREFERENCED_PARAMETER(object); 	UNREFERENCED_PARAMETER(name); #endif }  // ------------------------------ // DXGISetDebugObjectName函数 // ------------------------------ // 为DXGI对象在图形调试器中清空对象名 // [In]object				DXGI对象 inline void DXGISetDebugObjectName(_In_ IDXGIObject* object, _In_ std::nullptr_t) { #if (defined(DEBUG) || defined(_DEBUG)) &amp;&amp; (GRAPHICS_DEBUGGER_OBJECT_NAME) 	object-&gt;SetPrivateData(WKPDID_D3DDebugObjectName, 0, nullptr); #else 	UNREFERENCED_PARAMETER(object); #endif }</code></pre> <p>在已经设置过名字的情况下，想要更名需要先调用<code>nullptr_t</code>重载版本，再调用正常版本。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/41ca7cfb9913711d05c3e3e18ed57ef9.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>设置好后，在图形调试的时候一看名字就能知道绑定的情况了。</p> <p>如果你不希望使用调试器对象具名化，可以在<code>d3dUtil.h</code>的开头找到这样的宏：</p> <pre><code class="language-cpp">// 默认开启图形调试器具名化 // 如果不需要该项功能，可通过全局文本替换将其值设置为0 #ifndef GRAPHICS_DEBUGGER_OBJECT_NAME #define GRAPHICS_DEBUGGER_OBJECT_NAME (1) #endif</code></pre> <p>将其修改后只会剩下默认的<code>DDSTextureLoader</code>和<code>WICTextureLoader</code>的对象具名化。</p> <p><strong>注意：在你的Release版本应用程序应该避免出现对调试对象名称的设置。你可以将相关代码移出项目。</strong></p> <h2 id="查看着色器资源视图中的纹理资源">查看着色器资源视图中的纹理资源</h2> <p>以下图像素着色器阶段的为例：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3c22306717ab74feded9554ee5382b32.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>我们可以很清楚地看到资源的绑定情况，红色表示当前Slot没有资源绑定上去，如果对没有绑定纹理的对象进行采样，会在程序调试运行时的调试输出窗口看到DX Error。当然本示例红的也并不影响，因为会在着色器检查Dimension是否为0从而避开采样。</p> <p>绿色的资源姑且认为是一个有<code>UNKNOWN</code>含义的DXGI格式，在通过SRV具体化。点击Go的箭头我们可以观察传入的着色器资源。</p> <h2 id="查看管线状态采样器">查看管线状态、采样器</h2> <p>基本上光栅化状态、深度/模板状态和混合状态都是所见即所得</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/934dbcc008a92e3599f5cd2420cd2cfa.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/39c9ee040a7740d0b88e3a78c83d6ac5.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>采样器则在像素着色器阶段选中采样器可以查看</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/c6ef33555cc298d89dd26c8765e27e70.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>虽然这些状态你也可以在C++看</p> </h1> <p>接下来就开始进入到重点部分了，使用图形调试器的核心目的还是要观察着色器运行的时候遇到了哪些问题。当然有时候甚至会遇到该有的着色器却被跳过不执行的情况，这时候就先要去前面排查该绑定的资源、状态、着色器、输入是否都OK了，然后才是对上一个正常运行的着色器进行调试。</p> <p>对于顶点着色器，在Mesh Viewer中选择要调试的顶点右键 - Debug this vertex即可</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/454ad004fea52e243cf6d7ec257f96df.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>对于像素着色器，在Texture Viewer中的Output选择RT后，右键选取某一像素，在Pixel Context处点Debug即可</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/bdda2b22aaa848e12c33ee5b6d926fde.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>而调试计算着色器，需要在Pipeline State选择CS，按下图选择Debug，然后填写要调试的线程组编号和组内线程编号（或者全局线程ID）：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/759dfba15b1d2fdfeb46da63e197e3b4.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>然后就进入到了着色器调试界面：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/ef7ef455fc36d6a1595cc9f9c36c62bf.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>因为鼠标操作麻烦，我们需要记住几个快捷键：<strong>F10</strong>单步跳过，<strong>F11</strong>单步进入，<strong>ctrl+F11</strong>单步跳出</p> <p>左侧<code>Constants &amp; Resources</code>可以查看顶点输入、使用的常量、资源等，右侧<code>Watch</code>可以添加变量观察</p> <p>鼠标悬停在代码的变量可以观察变量值</p> <p>右键代码Go to disassembly可以转汇编查看</p> <p>左侧file list可以查看用到的hlsl文件，以及编译shader时候的预定义宏</p> <p>此时首先你需要优先关注局部变量中各个会被用到的常量、输入值是否都是正常的，如果出现常量缓冲区中的值全0或者乱值的情况，说明常量缓冲区可能没有被更新。</p> <h2 id="修改着色器再运行">修改着色器再运行</h2> <p>这是VS的图形调试器所没有的功能，在修改了某次绘制用到的着色器代码并编译后，就可以影响到当前及之后的所有绘制。</p> <p>下面是一个例子，这里尝试修改某个绘制的像素着色器代码：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/63df02edf80be6289f1d7da1f0216b1d.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>然后尝试修改下面<code>g_VisualizePerSampleShaing</code>为<code>true</code>，使得当前绘制的像素颜色强制为红色：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/fead05bf8e8d30e33d87aba1778b1c88.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>完成后选择<code>Apply changes</code>，返回<code>Texture Viewer</code>观察渲染目标的输出变化：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f77ef51d5af262e9791c8c6d864c305c.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>可以看到，那些执行PS的像素都被染成了红色，观看后续的帧也可以发现的确产生了影响：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a6e4098bfc982f1fb00a173cec75f71b.jpg" alt="RenderDoc图形调试器详细使用教程(基于DirectX11) "></p> <p>如果要退回变化，则回到像素着色器的Edit处，选择<code>Remove changes</code>即可。</p> </h1> <p>因为目前暂时还没有使用的需要，具体信息查看下面文档：</p> <p>https://renderdoc.org/docs/in_application_api.html</p> <p>如果某些DrawCall、Dispatch不是每帧都会产生的话，编程捕获的方式还是有必要的。</p> </h1> <p><strong>调试技巧需要经常使用才能够熟练掌握</strong>，相比普通调试来说，图形调试会更加复杂。目前RenderDoc的调试体验比VS的图形调试器会好一些，并且最近VS的图形调试器有些问题，调试不了shader。<strong>在初学DX的阶段容易在资源管理上出问题，因此重点是要先确认在绘制之前，绑定到渲染管线的各种资源是否正常，然后才是对着色器代码进行调试。</strong>所以前期准备工作的出错一般占很大的一部分，而着色器代码引发的错误可能只是占较小的一部分。<strong>等到了渲染管线的资源绑定管理体系逐渐稳定以后，使用图形调试的重心才会逐渐转移到以着色器代码的调试为主。</strong>有时候图形调试器解决不了的问题，还需要仔细观察普通调试下的输出窗口是否有渲染管线绘制事件执行时输出的报错信息。</p> <p>当然里面还有很多强大的功能没有挖掘出来，或者现在还不是比较常用而没列出来。有兴趣的读者可以查看renderdoc的文档：</p> <p>Introduction — RenderDoc documentation</p> <p>这篇博客在后续还会有所变动，因为后续个人的学习会引发新的调试需求而变动。</p> <p><strong>DirectX11 With Windows SDK完整目录</strong></p> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-107289.htm">宠物粮食品牌取名字大全集 宠物粮食品牌取名字大全集图片</a></p>
                                        <p>下一个：<a href="/news/article-108107.htm">国考公务员2021岗位表（国考公务员考试职位表2021）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-95732.htm" title="动物防疫疫苗数量统计表怎么填图片（动物防疫疫苗数量统计表怎么填图片大全）">动物防疫疫苗数量统计表怎么填图片（动物防疫疫苗数量统计表怎么填图片大全）</a></li>
                        <li class="py-2"><a href="/news/article-67103.htm" title="打动物疫苗有什么过敏反应 打动物疫苗有什么过敏反应吗">打动物疫苗有什么过敏反应 打动物疫苗有什么过敏反应吗</a></li>
                        <li class="py-2"><a href="/news/article-77690.htm" title="netty系列之:netty中的核心MessageToMessage编码器">netty系列之:netty中的核心MessageToMessage编码器</a></li>
                        <li class="py-2"><a href="/news/article-83236.htm" title="深圳宠物领养中心有哪些地方 深圳宠物领养中心有哪些地方好">深圳宠物领养中心有哪些地方 深圳宠物领养中心有哪些地方好</a></li>
                        <li class="py-2"><a href="/news/article-98586.htm" title="延吉宠物店电话号码多少号（延吉宠物医院24小时营业）">延吉宠物店电话号码多少号（延吉宠物医院24小时营业）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-30-clash-stash.htm" title="3月30日→20.5M/S|2025年最新免费节点Free Stash Node订阅链接地址">3月30日→20.5M/S|2025年最新免费节点Free Stash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-73622.htm" title="附近免费领养狗狗的地方在哪里呀最近（哪有领养狗狗的地方）">附近免费领养狗狗的地方在哪里呀最近（哪有领养狗狗的地方）</a></li>
                        <li class="py-2"><a href="/news/article-80465.htm" title="开一家宠物店都需要什么（开一家宠物店需要什么资质）">开一家宠物店都需要什么（开一家宠物店需要什么资质）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-18-free-clash-stash.htm" title="3月18日→19.2M/S|2025年最新免费节点Free Stash Node订阅链接地址">3月18日→19.2M/S|2025年最新免费节点Free Stash Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-107289.htm" title="宠物粮食品牌取名字大全集 宠物粮食品牌取名字大全集图片">宠物粮食品牌取名字大全集 宠物粮食品牌取名字大全集图片</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
        <!-- about-section end -->
                <!-- main-footer -->
        <footer class="main-footer">
            <div class="footer-bottom">
                <div class="auto-container">
                    <div class="inner-box clearfix">
                        <div class="copyright pull-left">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">Free Stash Node免费机场节点分享官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!-- main-footer end -->
        <!--Scroll to top-->
        <button class="scroll-top scroll-to-target" data-target="html">
            <span class="fa fa-arrow-up"></span>
        </button>
        <!-- jequery plugins -->
        <script src="/assets/website/js/frontend/freestashnode/jquery.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/popper.min.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/bootstrap.min.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/owl.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/wow.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/validation.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/jquery.fancybox.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/appear.js"></script>
        <script src="/assets/website/js/frontend/freestashnode/scrollbar.js"></script>
        <!-- main-js -->
        <script src="/assets/website/js/frontend/freestashnode/script.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    </div>
</body><!-- End of .page_wrapper -->

</html>